node [fillcolor = gray]
data [label = 'Data']
PC [label = 'Principle Components' fillcolor = OrangeRed]
node [fillcolor = WhiteSmoke, shape = oval]  //orange1-4
sdev [label = 'sdev: std of PCs']
rotation [label = 'rotation: Loading of PCs on origin vars']
x [label = 'x: Rotated Data']
node [fillcolor = Gold, shape = box]
Scree [lable = 'Scree Plot']
Interpret [label = 'Interpret grouping of vars']
QQplot [label = 'Q-Q Plot: Single PC']
scatter [label = 'Scatter Plot of 2 PCs']
edge [color = Darkgray, arrowhead = normal, arrowtail = none]
data -> PC [label='prcomp()']
sdev -> Scree [label = 'factoextra::fviz_eig()']
rotation -> Interpret
x -> {QQplot scatter}
edge [style=dashed, color = grey, arrowhead = none, arrowtail = none]
PC -> {sdev rotation x}
}
")
grViz("
digraph { //non-directed graph
graph [layout = dot]  //layout = dot|neato|twopi|circo|fdp
rankdir=LR    // TB|RL|LR, LR: Left to Right orientation
node [shape = box,
style = filled,  margin=0.18]
node [fillcolor = gray]
data [label = 'Data']
PC [label = 'Principle Components' fillcolor = OrangeRed]
node [fillcolor = WhiteSmoke, shape = oval]  //orange1-4
sdev [label = 'sdev: std of PCs']
rotation [label = 'rotation: Loading of PCs on origin vars']
x [label = 'x: Rotated Data']
node [fillcolor = Gold, shape = box]
Scree [lable = 'Scree Plot']
Interpret [label = 'Interpret grouping of vars']
QQplot [label = 'Q-Q Plot: Single PC']
scatter [label = 'Scatter Plot of 2 PCs']
edge [color = Darkgray, arrowhead = normal, arrowtail = none]
data -> PC [label='prcomp()']
sdev -> Scree Plot [label = 'factoextra::fviz_eig()']
rotation -> Interpret
x -> {QQplot scatter}
edge [style=dashed, color = grey, arrowhead = none, arrowtail = none]
PC -> {sdev rotation x}
}
")
grViz("
digraph { //non-directed graph
graph [layout = dot]  //layout = dot|neato|twopi|circo|fdp
rankdir=LR    // TB|RL|LR, LR: Left to Right orientation
node [shape = box,
style = filled,  margin=0.18]
node [fillcolor = gray]
data [label = 'Data']
PC [label = 'Principle Components' fillcolor = OrangeRed]
node [fillcolor = WhiteSmoke, shape = oval]  //orange1-4
sdev [label = 'sdev: std of PCs']
rotation [label = 'rotation: Loading of PCs on origin vars']
x [label = 'x: Rotated Data']
node [fillcolor = Gold, shape = box]
Scree [label = 'Scree Plot']
Interpret [label = 'Interpret grouping of vars']
QQplot [label = 'Q-Q Plot: Single PC']
scatter [label = 'Scatter Plot of 2 PCs']
edge [color = Darkgray, arrowhead = normal, arrowtail = none]
data -> PC [label='prcomp()']
sdev -> Scree [label = 'factoextra::fviz_eig()']
rotation -> Interpret
x -> {QQplot scatter}
edge [style=dashed, color = grey, arrowhead = none, arrowtail = none]
PC -> {sdev rotation x}
}
")
?eigen
cov(iris[,1:3]) %>% eigen
cov(iris[,1:3]) %>% eigen(symmetric = T)
prcomp(iris[,1:3]) %>% screeplot()
prcomp(iris[,1:3]) %>% screeplot()
prcomp(iris[,1:3]) %>% screeplot()
?screeplot
prcomp(iris[,1:3]) %>% screeplot(type="lines")
prcomp(iris[,1:3]) %>% fviz_eig()
library(factoextra)
prcomp(iris[,1:3]) %>% fviz_eig()
?fviz_eig
fviz_eig
prcomp(iris[,1:3]) %>%
fviz_eig(choice = "eigenvalue",
geom = "line",
addlabels = T)
prcomp(iris[,1:3]) %>%
fviz_eig(choice = "eigenvalue",
geom = "line",
addlabels = T)
library(factoextra)
prcomp(iris[,1:3]) %>% fviz_eig()
?qqplot()
prcomp(iris[,1:3]) %>% qqplot()
prcomp(iris[,1:3])
prcomp(iris[,1:3])[["rotation"]][,1] %>% qqplot()
prcomp(iris[,1:3])[["rotation"]]
prcomp(iris[,1:3])[["rotation"]][,1]
prcomp(iris[,1:3])[["x"]]
prcomp(iris[,1:3])[["x"]][,1]
prcomp(iris[,1:3])[["x"]][,1] %>% qqplot()
?rt
rt(200, df = 5)
y <- rt(200, df = 5)
qqnorm(y); qqline(y, col = 2)
qqplot(y, rt(300, df = 5))
prcomp(iris[,1:3])[["x"]][,1] %>% qqnorm()
library(DiagrammeR)
grViz("
digraph { //non-directed graph
graph [layout = dot]  //layout = dot|neato|twopi|circo|fdp
rankdir=LR    // TB|RL|LR, LR: Left to Right orientation
node [shape = box,
style = filled,  margin=0.3]
node [fillcolor = gray]
data [label = 'Data']
node [fillcolor = orange1]  //orange1-4
cov [label = 'Cov Matrix']
eigen [label = 'Eigenvalue & Eigenvector']
PC [label = 'Principle Components' fillcolor = OrangeRed]
edge [color = grey3, arrowhead = normal, arrowtail = none]
cov -> eigen [label='Compute']
edge [color = grey, arrowhead = normal, arrowtail = none]
data -> cov [label='Compute']
data -> eigen [label='Input']
eigen -> PC [label='Rotate']
}
")
grViz("
digraph { //non-directed graph
graph [layout = dot]  //layout = dot|neato|twopi|circo|fdp
rankdir=LR    // TB|RL|LR, LR: Left to Right orientation
node [shape = box,
style = filled,  margin=0.18]
node [fillcolor = gray]
data [label = 'Data']
PC [label = 'Principle Components' fillcolor = OrangeRed]
node [fillcolor = WhiteSmoke, shape = oval]  //orange1-4
sdev [label = 'sdev: std of PCs']
rotation [label = 'rotation: Loading of PCs on origin vars']
x [label = 'x: Rotated Data']
node [fillcolor = Gold, shape = box]
Scree [label = 'Scree Plot']
Interpret [label = 'Interpret grouping of vars']
QQplot [label = 'Q-Q Plot: Single PC']
scatter [label = 'Scatter Plot of 2 PCs']
edge [color = Darkgray, arrowhead = normal, arrowtail = none]
data -> PC [label='prcomp()']
sdev -> Scree [label = 'factoextra::fviz_eig()']
rotation -> Interpret
x -> {QQplot scatter}
edge [style=dashed, color = grey, arrowhead = none, arrowtail = none]
PC -> {sdev rotation x}
}
")
cov(iris[,1:3]) %>% eigen()
prcomp(iris[,1:3]) %>% screeplot(type="lines")
library(factoextra)
prcomp(iris[,1:3]) %>% fviz_eig()
prcomp(iris[,1:3]) %>%
fviz_eig(choice = "eigenvalue", # y as eigenvalue
geom = "line",
addlabels = T) +
scale_y_continuous(limits = c(0, 5))
prcomp(iris[,1:3])[["x"]][,1] %>%
qqnorm()
QQplot <- function(x, ID="none",
theme=NULL, color="red", text=TRUE,
text_adj=
c(hjust=-0.1, vjust=0, size=3)) {
library(dplyr)
library(ggplot2)
x <- as_data_frame(x)
n <- nrow(x)
quantiles <- qnorm(p=seq(0.5/n, 1-0.5/n, 1/n))
if (ID == "none") { # assign ID if not passed
ID <- as.character(1:n)
} else {
ID <- as_data_frame(ID)
ID <- as.character(ID[[colnames(ID)]])
}
if (text == TRUE) {
text <- geom_text(aes(label=ID),
hjust=text_adj[1],
vjust=text_adj[2],
size = text_adj[3])
} else {text <- NULL}
data <- cbind(ID, x)
colnames(data) <- c("ID", "x")
data <- data %>% arrange(x) %>% mutate(quantile=quantiles)
pl <- ggplot(data, aes(x=quantiles, y=x))+
geom_point(color=color)+
text + theme +
labs(x="Predicted Quantile",
y="x",
title="Q-Q Plot")
pl
}
prcomp(iris[,1:3])[["x"]][,1] %>% QQplot()
prcomp(iris[1:100, 1:3])[["x"]][,1] %>% QQplot()
prcomp(iris[1:50, 1:3])[["x"]][,1] %>%
QQplot()
prcomp(iris[1:80, 1:3])[["x"]][,1] %>%
QQplot()
prcomp(iris[1:60, 1:3])[["x"]][,1] %>%
QQplot()
prcomp(iris[1:60, 1:3])[["x"]][,1] %>%
qqnorm()
.packages()
x <- .packages()
x
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
dev = 'svg',
fig.dim = c(5, 3),
fig.height = 3,
comment = ""
)
# automatically create a bib database for R packages
knitr::write_bib(c(
.packages(), 'bookdown', 'knitr', 'rmarkdown'
), 'packages.bib')
?princomp
serve_book(dir = ".", output_dir = "_book", preview = TRUE,
in_session = TRUE, ...)
library(bookdown)
serve_book(dir = ".", output_dir = "_book", preview = TRUE,
in_session = TRUE, ...)
serve_book(dir = ".", output_dir = "_book", preview = TRUE,
in_session = TRUE)
preview_chapter()
library(bookdown)
preview_chapter()
preview_chapter("PCA.Rmd")
?preview_chapter()
library(DiagrammeR)
grViz("
digraph { //non-directed graph
graph [layout = dot]  //layout = dot|neato|twopi|circo|fdp
rankdir=LR    // TB|RL|LR, LR: Left to Right orientation
node [shape = box,
style = filled,  margin=0.3]
node [fillcolor = gray]
data [label = 'Data']
node [fillcolor = orange1]  //orange1-4
cov [label = 'Cov Matrix']
eigen [label = 'Eigenvalue & Eigenvector']
PC [label = 'Principle Components' fillcolor = OrangeRed]
edge [color = grey3, arrowhead = normal, arrowtail = none]
cov -> eigen [label='Compute']
edge [color = grey, arrowhead = normal, arrowtail = none]
data -> cov [label='Compute']
data -> eigen [label='Input']
eigen -> PC [label='Rotate']
}
")
grViz("
digraph { //non-directed graph
graph [layout = dot]  //layout = dot|neato|twopi|circo|fdp
rankdir=LR    // TB|RL|LR, LR: Left to Right orientation
node [shape = box,
style = filled,  margin=0.18]
node [fillcolor = gray]
data [label = 'Data']
PC [label = 'Principle Components' fillcolor = OrangeRed]
node [fillcolor = WhiteSmoke, shape = oval]  //orange1-4
sdev [label = 'sdev: std of PCs']
rotation [label = 'rotation: Loading of PCs on origin vars']
x [label = 'x: Rotated Data']
node [fillcolor = Gold, shape = box]
Scree [label = 'Scree Plot']
Interpret [label = 'Interpret grouping of vars']
QQplot [label = 'Q-Q Plot: Single PC']
scatter [label = 'Scatter Plot of 2 PCs']
edge [color = Darkgray, arrowhead = normal, arrowtail = none]
data -> PC [label='prcomp()']
sdev -> Scree [label = 'factoextra::fviz_eig()']
rotation -> Interpret
x -> {QQplot scatter}
edge [style=dashed, color = grey, arrowhead = none, arrowtail = none]
PC -> {sdev rotation x}
}
")
cov(iris[,1:3]) %>% eigen()
prcomp(iris[,1:3]) %>% screeplot(type="lines")
library(factoextra)
prcomp(iris[,1:3]) %>% fviz_eig()
prcomp(iris[,1:3]) %>%
fviz_eig(choice = "eigenvalue", # y as eigenvalue
geom = "line",
addlabels = T) +
scale_y_continuous(limits = c(0, 5))
prcomp(iris[1:60, 1:3])[["x"]][,1] %>%
qqnorm()
QQplot <- function(x, ID="none",
theme=NULL, color="red", text=TRUE,
text_adj=
c(hjust=-0.1, vjust=0, size=3)) {
library(dplyr)
library(ggplot2)
x <- as_data_frame(x)
n <- nrow(x)
quantiles <- qnorm(p=seq(0.5/n, 1-0.5/n, 1/n))
if (ID == "none") { # assign ID if not passed
ID <- as.character(1:n)
} else {
ID <- as_data_frame(ID)
ID <- as.character(ID[[colnames(ID)]])
}
if (text == TRUE) {
text <- geom_text(aes(label=ID),
hjust=text_adj[1],
vjust=text_adj[2],
size = text_adj[3])
} else {text <- NULL}
data <- cbind(ID, x)
colnames(data) <- c("ID", "x")
data <- data %>% arrange(x) %>% mutate(quantile=quantiles)
pl <- ggplot(data, aes(x=quantiles, y=x))+
geom_point(color=color)+
text + theme +
labs(x="Theoretical Quantile",
y="x",
title="Q-Q Plot")
pl
}
.packages()
x <- .packages()
x
pandoc_version()
rmarkdown::pandoc_version()
bookdown::render_book('index.Rmd', 'bookdown::gitbook')
bookdown::render_book('index.Rmd', 'bookdown::pdf_book')
library(mvtnorm)
bookdown::render_book('index.Rmd', 'bookdown::gitbook')
bookdown::render_book('index.Rmd', 'bookdown::gitbook')
is.installed("hydroGOF")
installed.packages()
is.installed("mat2tex")
# Function to check whether package is installed
is.installed <- function(mypkg){
is.element(mypkg, installed.packages()[,1])
}
is.element(mypkg, installed.packages()[,1])
is.installed <- function(mypkg){
is.installed("mat2tex")
bookdown::render_book('index.Rmd', 'bookdown::gitbook')
bookdown::render_book('index.Rmd', 'bookdown::gitbook')
bookdown::render_book('index.Rmd', 'bookdown::gitbook')
head(iris)
iris[,-5]
head(iris[-5])
library(dplyr)
library(knitr)
head(iris) %>%
kable(, format = "markdown", align = "c")
head(iris) %>%
kable(format = "markdown", align = "c")
S <- cov(iris[,-5])
S
S <- cov(iris[,-5])
round(S, 2)
S <- cov(iris[,-5])
round(S, 3)
S.eigen <- eigen(S)
round(S.eigen, 3)
S.eigen <- eigen(S)
S.eigen <- eigen(S)
S.eigen
head(cars)
?data()
head(iris)
data()
head(airquality)
head(AirPassengers)
head(crimtab)
head(mtcars)
dim(mtcars)
S.eigen <- eigen(S)
S.eigen
plot(S.eigen$values, xlab = 'Eigenvalue Number', ylab = 'Eigenvalue Size', main = 'Scree Graph', type = 'b', xaxt = 'n')
axis(1, at = seq(1, 4, by = 1))
P <- as.matrix(S.eigen$vectors[,1:2])
D <- matrix(0, dim(C)[2], dim(C)[2])
S.eigen <- eigen(S)
S.eigen
S.eigen$vectors[,1:2]
P <- S.eigen$vectors[,1:2] %>% as.matrix()
P
class(P)
dim(P)
?diag()
diag(D) <- S.eigen$values[1:2]
D
rm(list = "D")
diag(D) <- S.eigen$values[1:2]
rm(list = "D")
S.eigen$values[1:2]
diag(D) <- 1
diag(D, nrow = dim(P)[2])
diag(D, nrow = dim(P)[2]) <- S.eigen$values[1:2]
diag(D, nrow = dim(P)[2],
nrow = dim(P)[2]) <- S.eigen$values[1:2]
P <- S.eigen$vectors[,1:2] %>% as.matrix()
diag(D, nrow = dim(P)[2],
nrow = dim(P)[2]) <- S.eigen$values[1:2]
P <- S.eigen$vectors[,1:2] %>% as.matrix()
D <- diag(S.eigen$values[1:2],
nrow = dim(P)[2],
nrow = dim(P)[2])
diag(1, 1,1)
diag(c(1,2), 2,2)
S.eigen$values[1:2]
dim(P)[2]
P <- S.eigen$vectors[,1:2] %>% as.matrix()
D <- diag(S.eigen$values[1:2],
nrow = dim(P)[2],
ncol = dim(P)[2])
D
S.loadings <- P %*% sqrt(D)
round(S.loadings, 4)
# Perform PCA and take the resulting first two PCs
prcomp(iris[,-5])$rotation[,1:2]%>%
round(4)
# Perform PCA and take the resulting first two PCs
prcomp(iris[,-5])$rotation[,1:2]%>%
round(4) *2
# Perform PCA and take the resulting first two PCs
prcomp(iris[,-5])$rotation[,1:2]%>%
round(4)
S.loadings <- P %*% sqrt(D)
round(S.loadings, 2)
# Perform PCA and take the resulting first two PCs
prcomp(iris[,-5])$rotation[,1:2]%>%
round(2)
S.eigen$vectors[,1:2]
S.eigen$vectors[,1:2] %>%
round(3)
# Perform PCA and take the resulting first two PCs
prcomp(iris[,-5])$rotation[,1:2]%>%
round(3)
S.h2 <- rowSums(S.loadings^2)
S.h2
S.h2 <- rowSums(S.loadings^2)
round(S.h2, 3)
S.h2 <- S.loadings^2 %>% rowSums()
round(S.h2, 3)
colSums(S.loadings^2)
colSums(S.loadings^2)
S.eigen$values[1:2] %>% round(3)
colSums(S.loadings^2) %>% round(3)
S.u2 <- diag(S) - S.h2
S.u2
S.u2 <- diag(S) - S.h2
S.u2 %>% round(3)
S.u2 <- diag(S) - S.h2
S.u2 %>% round(4)
diag(S)
diag(S) - S.h2 %>%
round(4)
prop.loadings <- colSums(S.loadings^2)
var_F1 <- colSums(S.loadings^2)[1]
var_F2 <- colSums(S.loadings^2)[2]
var_F1 / sum(S.eigen$values)
var_F2 / sum(S.eigen$values)
var_F1 <- colSums(S.loadings^2)[1]
var_F2 <- colSums(S.loadings^2)[2]
cbind(var_F1 / sum(S.eigen$values),
var_F2 / sum(S.eigen$values)) %>%
round(3)
colSums(S.loadings^2)
prop.exp <- cbind(var_F1 / sum(colSums(S.loadings^2)), var_F2 / sum(colSums(S.loadings^2))
prop.exp
prop.exp <- cbind(var_F1 / sum(colSums(S.loadings^2)), var_F2 / sum(colSums(S.loadings^2)
prop.exp
prop.exp <- cbind(var_F1 / sum(colSums(S.loadings^2)),
var_F2 / sum(colSums(S.loadings^2)))
prop.exp
var_F1 <- colSums(S.loadings^2)[1]
var_F2 <- colSums(S.loadings^2)[2]
cbind(var_F1 / sum(S.eigen$values),
var_F2 / sum(S.eigen$values))
iris.FA.PC <-
principal(iris[,-5],
nfactors = 2,
rotate = 'none',
covar = TRUE)
library(psych)
iris.FA.PC <-
principal(iris[,-5],
nfactors = 2,
rotate = 'none',
covar = TRUE)
iris.FA.PC
View(iris.FA.PC)
iris.FA.PC[["communality"]]
iris.FA.PC[["loadings"]]
iris.FA.PC[["values"]]
iris.FA.PC[["loadings"]]
iris.FA.PC
iris.FA.PC[["Vaccounted"]]
iris.FA.PC[["loadings"]]
iris.FA.PC[["communality"]]
iris.FA.PC[["Vaccounted"]]
iris.FA.PC[["loadings"]]
