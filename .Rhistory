Notes.log
library(DiagrammeR)
grViz("
digraph { //non-directed graph
graph [layout = neato]  //layout = dot|neato|twopi|circo|fdp
rankdir=LR    // TB|RL|LR, LR: Left to Right orientation
node [shape = box,
style = filled]
node [fillcolor = gray]
data [label = 'Data']
node [fillcolor = orange1]  //orange1-4
cov [label = 'Covariance Matrix']
eigen [label = 'Eigenvalue/Eigenvector of Cov Matrix']
PC [label = 'Principle Components']
edge [color = grey3, arrowhead = normal, arrowtail = none]
data -> cov -> eigen -> PC
data -> eigen
}
")
library(DiagrammeR)
grViz("
digraph { //non-directed graph
graph [layout = neato]  //layout = dot|neato|twopi|circo|fdp
rankdir=TB    // TB|RL|LR, LR: Left to Right orientation
node [shape = box,
style = filled]
node [fillcolor = gray]
data [label = 'Data']
node [fillcolor = orange1]  //orange1-4
cov [label = 'Covariance Matrix']
eigen [label = 'Eigenvalue/Eigenvector of Cov Matrix']
PC [label = 'Principle Components']
edge [color = grey3, arrowhead = normal, arrowtail = none]
data -> cov -> eigen -> PC
data -> eigen
}
")
library(DiagrammeR)
grViz("
digraph { //non-directed graph
graph [layout = dot]  //layout = dot|neato|twopi|circo|fdp
rankdir=TB    // TB|RL|LR, LR: Left to Right orientation
node [shape = box,
style = filled,  margin=0.2 0.055]
node [fillcolor = gray]
data [label = 'Data']
node [fillcolor = orange1]  //orange1-4
cov [label = ' Cov Matrix ']
eigen [label = ' Eigen-value/vector of Cov Matrix ']
PC [label = ' Principle Components ']
edge [color = grey3, arrowhead = normal, arrowtail = none]
cov -> eigen [label='Compute']
edge [color = grey, arrowhead = normal, arrowtail = none]
data -> {eigen cov}
eigen -> PC
}
")
library(DiagrammeR)
grViz("
digraph { //non-directed graph
graph [layout = dot]  //layout = dot|neato|twopi|circo|fdp
rankdir=TB    // TB|RL|LR, LR: Left to Right orientation
node [shape = box,
style = filled,  margin=0.2]
node [fillcolor = gray]
data [label = 'Data']
node [fillcolor = orange1]  //orange1-4
cov [label = ' Cov Matrix ']
eigen [label = ' Eigen-value/vector of Cov Matrix ']
PC [label = ' Principle Components ']
edge [color = grey3, arrowhead = normal, arrowtail = none]
cov -> eigen [label='Compute']
edge [color = grey, arrowhead = normal, arrowtail = none]
data -> {eigen cov}
eigen -> PC
}
")
library(DiagrammeR)
grViz("
digraph { //non-directed graph
graph [layout = dot]  //layout = dot|neato|twopi|circo|fdp
rankdir=TB    // TB|RL|LR, LR: Left to Right orientation
node [shape = box,
style = filled,  margin=0.18]
node [fillcolor = gray]
data [label = 'Data']
node [fillcolor = orange1]  //orange1-4
cov [label = ' Cov Matrix ']
eigen [label = ' Eigen-value/vector of Cov Matrix ']
PC [label = ' Principle Components ']
edge [color = grey3, arrowhead = normal, arrowtail = none]
cov -> eigen [label='Compute']
edge [color = grey, arrowhead = normal, arrowtail = none]
data -> {eigen cov}
eigen -> PC
}
")
library(DiagrammeR)
grViz("
digraph { //non-directed graph
graph [layout = dot]  //layout = dot|neato|twopi|circo|fdp
rankdir=TB    // TB|RL|LR, LR: Left to Right orientation
node [shape = box,
style = filled,  margin=0.15]
node [fillcolor = gray]
data [label = 'Data']
node [fillcolor = orange1]  //orange1-4
cov [label = ' Cov Matrix ']
eigen [label = ' Eigen-value/vector of Cov Matrix ']
PC [label = ' Principle Components ']
edge [color = grey3, arrowhead = normal, arrowtail = none]
cov -> eigen [label='Compute']
edge [color = grey, arrowhead = normal, arrowtail = none]
data -> {eigen cov}
eigen -> PC
}
")
library(DiagrammeR)
grViz("
digraph { //non-directed graph
graph [layout = fdp]  //layout = dot|neato|twopi|circo|fdp
rankdir=TB    // TB|RL|LR, LR: Left to Right orientation
node [shape = box,
style = filled,  margin=0.3]
node [fillcolor = gray]
data [label = 'Data']
node [fillcolor = orange1]  //orange1-4
cov [label = 'Cov Matrix']
eigen [label = 'Eigen-value/vector of Cov Matrix']
PC [label = 'Principle Components']
edge [color = grey3, arrowhead = normal, arrowtail = none]
cov -> eigen [label='Compute']
edge [color = grey, arrowhead = normal, arrowtail = none]
data -> {eigen cov}
eigen -> PC
}
")
library(DiagrammeR)
grViz("
digraph { //non-directed graph
graph [layout = circo]  //layout = dot|neato|twopi|circo|fdp
rankdir=TB    // TB|RL|LR, LR: Left to Right orientation
node [shape = box,
style = filled,  margin=0.3]
node [fillcolor = gray]
data [label = 'Data']
node [fillcolor = orange1]  //orange1-4
cov [label = 'Cov Matrix']
eigen [label = 'Eigen-value/vector of Cov Matrix']
PC [label = 'Principle Components']
edge [color = grey3, arrowhead = normal, arrowtail = none]
cov -> eigen [label='Compute']
edge [color = grey, arrowhead = normal, arrowtail = none]
data -> {eigen cov}
eigen -> PC
}
")
library(DiagrammeR)
grViz("
digraph { //non-directed graph
graph [layout = twopi]  //layout = dot|neato|twopi|circo|fdp
rankdir=TB    // TB|RL|LR, LR: Left to Right orientation
node [shape = box,
style = filled,  margin=0.3]
node [fillcolor = gray]
data [label = 'Data']
node [fillcolor = orange1]  //orange1-4
cov [label = 'Cov Matrix']
eigen [label = 'Eigen-value/vector of Cov Matrix']
PC [label = 'Principle Components']
edge [color = grey3, arrowhead = normal, arrowtail = none]
cov -> eigen [label='Compute']
edge [color = grey, arrowhead = normal, arrowtail = none]
data -> {eigen cov}
eigen -> PC
}
")
library(DiagrammeR)
grViz("
digraph { //non-directed graph
graph [layout = neato]  //layout = dot|neato|twopi|circo|fdp
rankdir=TB    // TB|RL|LR, LR: Left to Right orientation
node [shape = box,
style = filled,  margin=0.3]
node [fillcolor = gray]
data [label = 'Data']
node [fillcolor = orange1]  //orange1-4
cov [label = 'Cov Matrix']
eigen [label = 'Eigen-value/vector of Cov Matrix']
PC [label = 'Principle Components']
edge [color = grey3, arrowhead = normal, arrowtail = none]
cov -> eigen [label='Compute']
edge [color = grey, arrowhead = normal, arrowtail = none]
data -> {eigen cov}
eigen -> PC
}
")
library(DiagrammeR)
grViz("
digraph { //non-directed graph
graph [layout = neato]  //layout = dot|neato|twopi|circo|fdp
rankdir=LR    // TB|RL|LR, LR: Left to Right orientation
node [shape = box,
style = filled,  margin=0.3]
node [fillcolor = gray]
data [label = 'Data']
node [fillcolor = orange1]  //orange1-4
cov [label = 'Cov Matrix']
eigen [label = 'Eigen-value/vector of Cov Matrix']
PC [label = 'Principle Components']
edge [color = grey3, arrowhead = normal, arrowtail = none]
cov -> eigen [label='Compute']
edge [color = grey, arrowhead = normal, arrowtail = none]
data -> {eigen cov}
eigen -> PC
}
")
library(DiagrammeR)
grViz("
digraph { //non-directed graph
graph [layout = neato]  //layout = dot|neato|twopi|circo|fdp
rankdir=TB    // TB|RL|LR, LR: Left to Right orientation
node [shape = box,
style = filled,  margin=0.3]
node [fillcolor = gray]
data [label = 'Data']
node [fillcolor = orange1]  //orange1-4
cov [label = 'Cov Matrix']
eigen [label = 'Eigen-value/vector of Cov Matrix']
PC [label = 'Principle Components']
edge [color = grey3, arrowhead = normal, arrowtail = none]
cov -> eigen [label='Compute']
edge [color = grey, arrowhead = normal, arrowtail = none]
data -> {eigen cov}
eigen -> PC
}
")
library(DiagrammeR)
grViz("
digraph { //non-directed graph
graph [layout = neato]  //layout = dot|neato|twopi|circo|fdp
rankdir=BT    // TB|RL|LR, LR: Left to Right orientation
node [shape = box,
style = filled,  margin=0.3]
node [fillcolor = gray]
data [label = 'Data']
node [fillcolor = orange1]  //orange1-4
cov [label = 'Cov Matrix']
eigen [label = 'Eigen-value/vector of Cov Matrix']
PC [label = 'Principle Components']
edge [color = grey3, arrowhead = normal, arrowtail = none]
cov -> eigen [label='Compute']
edge [color = grey, arrowhead = normal, arrowtail = none]
data -> {eigen cov}
eigen -> PC
}
")
library(DiagrammeR)
grViz("
digraph { //non-directed graph
graph [layout = dot]  //layout = dot|neato|twopi|circo|fdp
rankdir=LR    // TB|RL|LR, LR: Left to Right orientation
node [shape = box,
style = filled,  margin=0.3]
node [fillcolor = gray]
data [label = 'Data']
node [fillcolor = orange1]  //orange1-4
cov [label = 'Cov Matrix']
eigen [label = 'Eigen-value/vector of Cov Matrix']
PC [label = 'Principle Components']
edge [color = grey3, arrowhead = normal, arrowtail = none]
cov -> eigen [label='Compute']
edge [color = grey, arrowhead = normal, arrowtail = none]
data -> {eigen cov}
eigen -> PC
}
")
PCA <- prcomp(iris[1:3])
PCA <- prcomp(iris[1:3], scale=T)
PCA
PCA[["rotation"]]
cov <- cor(iris[1:3])
cov
sd(iris[1,])
PCA$scale
?prcomp
